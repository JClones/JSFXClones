desc:       JClones_RS124
version:    1.0.0
author:     JClones
tags:       compressor
link:       https://github.com/JClones/JSFXClones
screenshot: https://github.com/JClones/JSFXClones/blob/master/assets/screenshots/JClones_RS124.png
about:
    # JClones_RS124
    JClones_RS124 is a clone of the first emulation of classic vari-mu compressor, originally developed in the 1960s by technical engineers of famous recording studio. This plugin captures the unique sonic characteristics and behavior of the original hardware, which was famously used on numerous iconic recordings by The Beatles and other legendary artists.

    ## Main Parameters

    **Model:** The plugin offers three different models of the RS124 compressor, each with unique characteristics and sonic qualities. These models are based on different historical units used at Abbey Road Studios, and they capture the distinct behavior and tonal nuances of the original hardware units.

    **60050A**: Known for its smooth and musical compression.

    **61010B**: Features a faster attack and release time than the 60050A model.
        
    **60070B**: Strikes a balance between the 60050A and 61010B models in terms of attack and release times.

    **Input (Gain):** Adjusts the input level, determining how much signal is sent into the compressor.

    **Release (Time):** Allows users to choose between different release times, affecting how quickly the compressor returns to its normal state after reducing gain. Original version had stepped release control with dedicated "hold" position. JClones version offers smooth release control with "hold" mode removed for better usability.

    **SuperFuse:** Engages a more aggressive compression curve, useful for adding more character and intensity to the compression effect. Original hardware unit didn't have such mode.

    **Output (Gain):** Controls the output level, ensuring the signal leaving the compressor is at the desired level. Original version had stepped output gain control. JClones version offers smooth output gain control for better usability.

    **Box Tone:** JClones version specific. Turns off audio coloration effect.

slider1:0<0,2,1{60050A,61010B,60070B}>Model
slider2:0<-24,24,0.1>Input
slider3:4<1,6,0.1>Release
slider4:0<0,1,1{Off,On}>SuperFuse
slider5:0<-30,0,0.1}>Output
slider6:1<0,1,1{Off,On}>Box Tone

@init

function DB_TO_K(x)
(
 10 ^ (x / 20)
);

// for allocator
function allocate(size) local(result)
(
  result = __memory_Index__;
   __memory_Index__ += size;
  result;
);

function sinh(x)
(
  (exp(x) - exp(-x)) * 0.5;
);

/*
 * Filter2 - digital second order filter:
 * X(z) = (a0 + a1*z^-1 + a2*z^-2) / (1 - b1*z^-1 - b2*z^-2)
 */
 
function Filter2_Init(a0, a1, a2, b1, b2)
(
  this.a0 = a0;
  this.a1 = a1;
  this.a2 = a2;
  this.b1 = b1;
  this.b2 = b2;
);

function Filter2_reset()
(
  this.x1 = 0;
  this.x2 = 0;
  this.y1 = 0;
  this.y2 = 0;
);

function Filter2_processSample(x0) local(y0)
(
  y0 = x0 * this.a0 + this.x1 * this.a1 + this.x2 * this.a2 +
    this.y1 * this.b1 + this.y2 * this.b2;
    
  // shift history
  this.x2 = this.x1;
  this.x1 = x0;
  
  this.y2 = this.y1;
  this.y1 = y0;
  
  y0;
);

/*
 * Interpolation stuff
 */

SEGMENT_LEN = 4;

function generate_segments(table_x, table_y, table_len) local(table_segment, i, x0, x1, x2, x3, y0, y1, y2, y3, dy1, dy2, delta_x, delta_y, sum_dy,
  delta_x2, delta_x3, s)
(
  table_segment = allocate(table_len * SEGMENT_LEN);

  // cubic splines
  i = 0;
  loop(table_len,

    // input points
    x1 = table_x[i];
    x2 = table_x[i + 1];

    y1 = table_y[i];
    y2 = table_y[i + 1];

    // get derivatives

    (i - 1 >= 0) ? (
      x0 = table_x[i - 1];
      y0 = table_y[i - 1];

      dy1 = (y2 - y0) / (x2 - x0);
    ) : (
      dy1 = (y2 - y1) / (x2 - x1);
    );

    (i + 2 < table_len) ? (
      x3 = table_x[i + 2];
      y3 = table_y[i + 2];

      dy2 = (y3 - y1) / (x3 - x1);
    ) : (
      dy2 = (y2 - y1) / (x2 - x1);
    );

    // get coefficients for x1..x2 -> y1 .. y2

    delta_x = x2 - x1;
    delta_y = y2 - y1;
    sum_dy = dy1 + dy2;

    delta_x2 = delta_x * delta_x;
    delta_x3 = delta_x2 * delta_x;

    s = table_segment + i * SEGMENT_LEN;
    
    // cubic spline
    s[0] = (delta_x * sum_dy - 2 * delta_y) / delta_x3;
    s[1] = -((dy1 + sum_dy) * delta_x2 + (sum_dy * x1 - delta_y) * 3.0 * delta_x - 6.0 * x1 * delta_y) / delta_x3;
    s[2] = (dy1 * delta_x3 + (dy1 + sum_dy) * 2.0 * x1 * delta_x2 + (sum_dy * x1 - 2.0 * delta_y) * 3.0 * x1 * delta_x - 6.0 * x1 * x1 * delta_y) / delta_x3;
    s[3] = -((x1 * dy1 - y1) * delta_x3 + (dy1 + sum_dy) * x1 * x1 * delta_x2 + (sum_dy * x1 - 3.0 * delta_y) * x1 * x1 * delta_x - 2.0 * x1 * x1 * x1 * delta_y) / delta_x3;

    i += 1;
  );

  // line for the 1st point
  x0 = table_x[0];
  x1 = table_x[1];

  y0 = table_y[0];
  y1 = table_y[1];

  i = 0;

  s = table_segment + i * SEGMENT_LEN;
  
  s[0] = 0.0;
  s[1] = 0.0;
  s[2] = (y1 - y0) / (x1 - x0);
  s[3] = (x1 * y0 - y1 * x0) / (x1 - x0);

  // line for the last point
  x0 = table_x[table_len - 2];
  x1 = table_x[table_len - 1];

  y0 = table_y[table_len - 2];
  y1 = table_y[table_len - 1];

  i = table_len - 2;

  s = table_segment + i * SEGMENT_LEN;

  s[0] = 0.0;
  s[1] = 0.0;  
  s[2] = (y1 - y0) / (x1 - x0);
  s[3] = (x1 * y0 - y1 * x0) / (x1 - x0);

 table_segment;
);

function interpolate(table_x, table_segment, table_len, x) local(left, right, mid, s)
(
  // find x interval

  left = 0;
  right = table_len - 1;

  (x < table_x[left]) ? ( x = table_x[left] );
  (x > table_x[right]) ? ( x = table_x[right] );

  while (

    mid = floor((left + right) / 2);

    (x < table_x[mid]) ?
      ( right = mid )
    :
      ( left = mid );
    
    right - left > 1;     
  );

  s = table_segment + left * SEGMENT_LEN;

  // interpolate
  x * x * x * s[0] + x * x * s[1] + x * s[2] + s[3];
);


/*
 * RS124Compressor
 */

MIN_LEVEL = DB_TO_K(-65.0);

function RS124Compressor_getFilterCoefficient(time_sec)
(
  pow(0.2, 1.0 / (time_sec * srate));
);

function RS124Compressor_Filter2_design_PK(freq_k, A_dB, Q) local(A_lin, SA_lin, w0, x1, x1_w0_2, A_lin2, SA_lin2, abs_1, abs_2, w02_pi2_2, inv_abs,
  x2, x3, x32, abs_3, abs_4, tan_w0_12, x4, x5, abs_5, sabs_42, x6, abs_6, sabs_31, x7, x8, x9,
  a0, a1, a2, b0, b1, b2)
(
  (A_dB != 0.0) ? (

    A_lin = DB_TO_K(A_dB);
    SA_lin = DB_TO_K(A_dB / 2.0);

    w0 = freq_k * 2.0 * $pi;

    x1 = sinh(log(sqrt(1.0 / (Q + Q) * (1.0 / (Q + Q)) + 1.0) + 1.0 / (Q + Q)) * (sin(w0) / w0));
    x1_w0_2 = x1 * w0 + x1 * w0;
    A_lin2 = A_lin * A_lin;
    SA_lin2 = SA_lin * SA_lin;
    abs_1 = abs(A_lin2 - 1.0);
    abs_2 = abs(SA_lin2 - 1.0);
    w02_pi2_2 = (w0 * w0 - $pi * $pi) * (w0 * w0 - $pi * $pi);
    inv_abs = 1.0 / abs(A_lin2 - SA_lin2);
    x2 = inv_abs * $pi * $pi * abs_2 * x1_w0_2 * x1_w0_2;
    x3 = sqrt((A_lin * x2 * A_lin + w02_pi2_2) / (x2 + w02_pi2_2));
    x32 = x3 * x3;
    abs_3 = abs(A_lin2 - x32);
    abs_4 = abs(SA_lin2 - x32);
    tan_w0_12 = tan(w0 * 0.5);
    x4 = tan_w0_12 * (sqrt(abs_3 / abs_1) * tan_w0_12);
    x5 = (sqrt(abs_2 / abs_4) * x4 + 1.0) * tan(x1_w0_2 * 0.5);
    abs_5 = abs(SA_lin2 - x3);
    sabs_42 = sqrt(abs_4 * abs_2);
    x6 = x5 * x5 * abs_4 - ((abs_5 - sabs_42) * x4 + (abs_5 - sabs_42) * x4);
    abs_6 = abs(A_lin2 - x3);
    sabs_31 = sqrt(abs_3 * abs_1);
    x7 = (abs_6 - sabs_31) * x4 + (abs_6 - sabs_31) * x4;
    x8 = sqrt((x7 + x6) * inv_abs);
    x9 = sqrt((x7 * SA_lin * SA_lin + x6 * A_lin * A_lin) * inv_abs);

    a0 = x4 + x9 + x3;
    a1 = (x3 - x4) * -2.0;
    a2 = x4 + x3 - x9;
    b0 = x8 + x4 + 1.0;
    b1 = (1.0 - x4) * -2.0;
    b2 = x4 + 1.0 - x8;

    this.Filter2_Init(a0 / b0, a1 / b0, a2 / b0, -b1 / b0, -b2 / b0);
  ) : (
    this.Filter2_Init(1.0, 0.0, 0.0, 0.0, 0.0);
  );
);

function RS124Compressor_Filter2_design_HS(freq_k, A_dB, Q) local(SA_lin, w0, SA_lin_m, cos_w0, sin_w0, xm, xs, SA_lin_p, xp, xpm,
  a0, a1, a2, b0, b1, b2)
(
  SA_lin = DB_TO_K(A_dB / 2.0);

  w0 = freq_k * 2.0 * $pi;

  SA_lin_m = SA_lin - 1.0;
  cos_w0 = cos(w0);
  sin_w0 = sin(w0);
  xm = SA_lin_m * cos_w0;
  xs = sin_w0 * sqrt((SA_lin * SA_lin + 1.0) / Q - SA_lin_m * SA_lin_m);
  SA_lin_p = SA_lin + 1.0;
  xp = SA_lin_p * cos_w0;
  xpm = SA_lin_p - xm;

  a0 = (xs + SA_lin_p + xm) * SA_lin;
  a1 = (xp + SA_lin_m) * SA_lin * -2.0;
  a2 = (SA_lin_p + xm - xs) * SA_lin;
  b0 = xpm + xs;
  b1 = SA_lin_m - xp + SA_lin_m - xp;
  b2 = xpm - xs;

  this.Filter2_Init(a0 / b0, a1 / b0, a2 / b0, -b1 / b0, -b2 / b0);
);

function RS124Compressor_Filter2_design_HPF(freq_k, Q) local(w0, cos_w0, sin_w0, sh, a0, a1, a2, b0, b1, b2)
(
  w0 = freq_k * 2.0 * $pi;

  cos_w0 = cos(w0);
  sin_w0 = sin(w0);
  sh = sinh(log(2.0) * (w0 / sin_w0) * Q * 0.5) * sin_w0;

  a0 = 0.5 * (cos_w0 + 1.0);
  a1 = -(cos_w0 + 1.0);
  a2 = a0;
  b0 = sh + 1.0;
  b1 = cos_w0 * -2.0;
  b2 = 1.0 - sh;

  this.Filter2_Init(a0 / b0, a1 / b0, a2 / b0, -b1 / b0, -b2 / b0);
);

function RS124Compressor_Filter2_design_HPF1(freq_k) local(w0, K, a0, a1, b0, b1)
(
  w0 = freq_k * 2.0 * $pi;

  K = w0 / tan(w0 * 0.5);

  a0 = K;
  a1 = -K;
  b0 = w0 + K;
  b1 = w0 - K;

  this.Filter2_Init(a0 / b0, a1 / b0, 0.0, -b1 / b0, 0.0);
);

function RS124Compressor_setParameters(
  compressor_model,     // 0 to 2
  input_gain_pos,       // 0 to 10
  release_pos,          // 1 to 6 (JClones specific; was: stepped)
  is_superfuse,
  output_gain_pos,      // -30 to 0 (JClones specific; was: stepped)
  box_tone)             // JClones specific
(
  // input gain
  this.input_gain_k = DB_TO_K(
    interpolate(
      input_gain_table_x,
      input_gain_table_segment[compressor_model],
      input_gain_table_len,
      input_gain_pos)
    );

  // output gain
  this.output_gain_k = DB_TO_K(
    interpolate(
      output_gain_table_x,
      output_gain_table_segment[compressor_model],
      output_gain_table_len,
      output_gain_pos) + 30.0
    );

  // filters:

  (compressor_model == 2) ? (
    this.pk.RS124Compressor_Filter2_design_PK(62.0 / srate, 0.0, 1.0);
    this.sc.RS124Compressor_Filter2_design_HPF1(10.0 / srate);
  ) : (
    this.pk.RS124Compressor_Filter2_design_PK(62.0 / srate, 0.8, 1.0);
    this.sc.RS124Compressor_Filter2_design_HPF1(32.9 / srate);
  );

  (compressor_model != 0) ? (
    this.hs.RS124Compressor_Filter2_design_HS(13000.0 / srate, 4.0, 0.6);
  ) : (
    this.hs.RS124Compressor_Filter2_design_HS(12000.0 / srate, 2.8, 0.6);
  );

  // attack
  this.attack_k = RS124Compressor_getFilterCoefficient(attack_time_table_sec[compressor_model]);

  // release
  (!is_superfuse) ? (
    this.release_k = RS124Compressor_getFilterCoefficient(
      interpolate(
        release_time_table_sec_x,
        release_time_table_sec_segment[compressor_model],
        release_time_table_len,
        release_pos);
    );
  ) : (
    this.release_k = this.attack_k;
  );

  this.compressor_model = compressor_model;
  this.box_tone = box_tone;
);

function RS124Compressor_setSampleRate()
(
  this.hpf.RS124Compressor_Filter2_design_HPF(8.0 / srate, 0.7);
);

function RS124Compressor_getLevel(x) local(level, filter_k)
(
  level = abs(x);
  
  (level > 1.0) ?
    level = 1.0;

  (level < MIN_LEVEL) ?
    level = MIN_LEVEL;

  filter_k = (level > this.level_state) ? this.attack_k : this.release_k;

  (this.startup_counter >= this.startup_counter_max) ? (
    // normal operation
    this.level_state = (1.0 - filter_k) * level + this.level_state * filter_k;
  ) : (
    // warmup (JClones specific)
    this.startup_level_sum += level * level;
    this.startup_counter += 1;
    this.level_state = sqrt(this.startup_level_sum / this.startup_counter);
  );

  this.level_state;
);


function RS124Compressor_processSample(x) local(xa, xb, xc, y, sc, level)
(
  (this.box_tone) ? (
    xa = this.hpf.Filter2_processSample(x);
    xb = this.pk.Filter2_processSample(xa);
    xc = this.hs.Filter2_processSample(xb);
  ) : (
    xc = x;   // JClones specific
  );

  y = xc * this.input_gain_k * this.feedback_gr;

  sc = this.sc.Filter2_processSample(y);

  level = this.RS124Compressor_getLevel(sc);

  this.feedback_gr = interpolate(gr_table_x[this.compressor_model], gr_table_segment[this.compressor_model], gr_table_len, level * 1.1);

  y * this.output_gain_k;
  
//  x;
);

function RS124Compressor_reset()
(
  this.hpf.Filter2_reset();
  this.pk.Filter2_reset();
  this.hs.Filter2_reset();

  this.sc.Filter2_reset();

  this.level_state = 0.0;
  this.feedback_gr = 1.0;

  this.startup_counter = 0;
  this.startup_counter_max = srate * 0.300; // 300 ms "warmup"
  this.startup_level_sum = 0.0;
);

//=========== table of measured values ============

function init_tables() local(i)
(
  input_gain_table_len = 11;

  // input_gain_table_x
  input_gain_table_x = allocate(input_gain_table_len);
  input_gain_table_x[0] = 0.0;
  input_gain_table_x[1] = 1.0;
  input_gain_table_x[2] = 2.0;
  input_gain_table_x[3] = 3.0;
  input_gain_table_x[4] = 4.0;
  input_gain_table_x[5] = 5.0;
  input_gain_table_x[6] = 6.0;
  input_gain_table_x[7] = 7.0;
  input_gain_table_x[8] = 8.0;
  input_gain_table_x[9] = 9.0;
  input_gain_table_x[10] = 10.0;

  // input_gain_table_y_raw
  input_gain_table_y_raw = allocate(input_gain_table_len * 3);
  input_gain_table_y_raw[0] = -90.5;
  input_gain_table_y_raw[1] = -49.4;
  input_gain_table_y_raw[2] = -35.5;
  input_gain_table_y_raw[3] = -27.6;
  input_gain_table_y_raw[4] = -24.7;
  input_gain_table_y_raw[5] = -22.1;
  input_gain_table_y_raw[6] = -16.6;
  input_gain_table_y_raw[7] = -9.8;
  input_gain_table_y_raw[8] = -5.6;
  input_gain_table_y_raw[9] = -2.1;
  input_gain_table_y_raw[10] = 0.0;
  input_gain_table_y_raw[11] = -105.0;
  input_gain_table_y_raw[12] = -47.3;
  input_gain_table_y_raw[13] = -38.7;
  input_gain_table_y_raw[14] = -30.1;
  input_gain_table_y_raw[15] = -25.6;
  input_gain_table_y_raw[16] = -21.5;
  input_gain_table_y_raw[17] = -15.0;
  input_gain_table_y_raw[18] = -10.0;
  input_gain_table_y_raw[19] = -5.0;
  input_gain_table_y_raw[20] = -1.3;
  input_gain_table_y_raw[21] = 0.0;
  input_gain_table_y_raw[22] = -92.5;
  input_gain_table_y_raw[23] = -48.9;
  input_gain_table_y_raw[24] = -33.8;
  input_gain_table_y_raw[25] = -26.6;
  input_gain_table_y_raw[26] = -23.6;
  input_gain_table_y_raw[27] = -21.3;
  input_gain_table_y_raw[28] = -16.3;
  input_gain_table_y_raw[29] = -11.1;
  input_gain_table_y_raw[30] = -6.0;
  input_gain_table_y_raw[31] = -3.0;
  input_gain_table_y_raw[32] = 0.0;

  // 3 models:
  input_gain_table_y = allocate(3);
  input_gain_table_segment = allocate(3);
  
  i = 0;
  loop(3,
    input_gain_table_y[i] = input_gain_table_y_raw + input_gain_table_len * i;
    input_gain_table_segment[i] = generate_segments(input_gain_table_x, input_gain_table_y[i], input_gain_table_len);
    i += 1;
  );

  output_gain_table_len = 6;

  // output_gain_table_x
  output_gain_table_x = allocate(output_gain_table_len);
  output_gain_table_x[0] = -30.0;
  output_gain_table_x[1] = -20.0;
  output_gain_table_x[2] = -15.0;
  output_gain_table_x[3] = -10.0;
  output_gain_table_x[4] = -5.0;
  output_gain_table_x[5] = 0.0;

  // output_gain_table_y_raw
  output_gain_table_y_raw = allocate(output_gain_table_len * 3);
  output_gain_table_y_raw[0] = -30.000;
  output_gain_table_y_raw[1] = -19.970;
  output_gain_table_y_raw[2] = -15.029;
  output_gain_table_y_raw[3] = -9.979;
  output_gain_table_y_raw[4] = -4.940;
  output_gain_table_y_raw[5] = -0.452;
  output_gain_table_y_raw[6] = -30.000;
  output_gain_table_y_raw[7] = -20.060;
  output_gain_table_y_raw[8] = -15.163;
  output_gain_table_y_raw[9] = -10.239;
  output_gain_table_y_raw[10] = -5.110;
  output_gain_table_y_raw[11] = -0.470;
  output_gain_table_y_raw[12] = -30.000;
  output_gain_table_y_raw[13] = -20.369;
  output_gain_table_y_raw[14] = -15.300;
  output_gain_table_y_raw[15] = -10.240;
  output_gain_table_y_raw[16] = -5.328;
  output_gain_table_y_raw[17] = -0.603;
  
  // 3 models:
  output_gain_table_y = allocate(3);
  output_gain_table_segment = allocate(3);
  
  i = 0;
  loop (3,
    output_gain_table_y[i] = output_gain_table_y_raw + output_gain_table_len * i;
    output_gain_table_segment[i] = generate_segments(output_gain_table_x, output_gain_table_y[i], output_gain_table_len);
    i += 1;
  );

  // attack_time_table_sec
  attack_time_table_sec = allocate(3);
  attack_time_table_sec[0] = 0.147;
  attack_time_table_sec[1] = 0.168;
  attack_time_table_sec[2] = 0.050;

  release_time_table_len = 7;

  // release_time_table_sec_x
  release_time_table_sec_x = allocate(release_time_table_len);
  release_time_table_sec_x[0] = 1.0;
  release_time_table_sec_x[1] = 2.0;
  release_time_table_sec_x[2] = 3.0;
  release_time_table_sec_x[3] = 4.0;
  release_time_table_sec_x[4] = 5.0;
  release_time_table_sec_x[5] = 6.0;
  release_time_table_sec_x[6] = 7.0;

  // release_time_table_sec_y_raw
  release_time_table_sec_y_raw = allocate(release_time_table_len * 3);
  release_time_table_sec_y_raw[0] = 3.4;
  release_time_table_sec_y_raw[1] = 6.5;
  release_time_table_sec_y_raw[2] = 11.4;
  release_time_table_sec_y_raw[3] = 22.0;
  release_time_table_sec_y_raw[4] = 38.0;
  release_time_table_sec_y_raw[5] = 64.0;
  release_time_table_sec_y_raw[6] = 3000.0;   // Hold
  release_time_table_sec_y_raw[7] = 2.9;
  release_time_table_sec_y_raw[8] = 5.0;
  release_time_table_sec_y_raw[9] = 8.1;
  release_time_table_sec_y_raw[10] = 15.6;
  release_time_table_sec_y_raw[11] = 25.3;
  release_time_table_sec_y_raw[12] = 44.0;
  release_time_table_sec_y_raw[13] = 3000.0;  // Hold
  release_time_table_sec_y_raw[14] = 1.0;
  release_time_table_sec_y_raw[15] = 1.9;
  release_time_table_sec_y_raw[16] = 3.2;
  release_time_table_sec_y_raw[17] = 5.8;
  release_time_table_sec_y_raw[18] = 9.8;
  release_time_table_sec_y_raw[19] = 16.9;
  release_time_table_sec_y_raw[20] = 3000.0;    // Hold

  // 3 models:
  release_time_table_sec_y = allocate(3);
  release_time_table_sec_segment = allocate(3);
  
  i = 0;
  loop (3,
    release_time_table_sec_y[i] = release_time_table_sec_y_raw + release_time_table_len * i;
    release_time_table_sec_segment[i] = generate_segments(release_time_table_sec_x, release_time_table_sec_y[i], release_time_table_len);
    i += 1;
  );

  gr_table_len = 18;

  // gr_table_x_raw
  gr_table_x_raw = allocate(gr_table_len * 3);
  gr_table_x_raw[0] = 0.0000000000000;
  gr_table_x_raw[1] = 0.0002106149709;
  gr_table_x_raw[2] = 0.0003686990847;
  gr_table_x_raw[3] = 0.0006501130364;
  gr_table_x_raw[4] = 0.0011044513000;
  gr_table_x_raw[5] = 0.0016804788350;
  gr_table_x_raw[6] = 0.0023251490470;
  gr_table_x_raw[7] = 0.0029973624020;
  gr_table_x_raw[8] = 0.0036842304960;
  gr_table_x_raw[9] = 0.0043689564300;
  gr_table_x_raw[10] = 0.0051289380440;
  gr_table_x_raw[11] = 0.0061411803430;
  gr_table_x_raw[12] = 0.0074524766260;
  gr_table_x_raw[13] = 0.0089647505090;
  gr_table_x_raw[14] = 0.0108051531700;
  gr_table_x_raw[15] = 0.0135162656500;
  gr_table_x_raw[16] = 0.0175188865400;
  gr_table_x_raw[17] = 1.0000000000000;
  gr_table_x_raw[18] = 0.0000000000000;
  gr_table_x_raw[19] = 0.0001822577969;
  gr_table_x_raw[20] = 0.0003190966185;
  gr_table_x_raw[21] = 0.0005625128294;
  gr_table_x_raw[22] = 0.0009804053352;
  gr_table_x_raw[23] = 0.0015538258180;
  gr_table_x_raw[24] = 0.0022126659440;
  gr_table_x_raw[25] = 0.0028988540950;
  gr_table_x_raw[26] = 0.0035634511280;
  gr_table_x_raw[27] = 0.0042128857880;
  gr_table_x_raw[28] = 0.0049078830270;
  gr_table_x_raw[29] = 0.0057280561550;
  gr_table_x_raw[30] = 0.0068850359210;
  gr_table_x_raw[31] = 0.0083364521810;
  gr_table_x_raw[32] = 0.0104270474000;
  gr_table_x_raw[33] = 0.0134988681400;
  gr_table_x_raw[34] = 0.0166703550600;
  gr_table_x_raw[35] = 1.0000000000000;
  gr_table_x_raw[36] = 0.0000000000000;
  gr_table_x_raw[37] = 0.0002118388963;
  gr_table_x_raw[38] = 0.0003683106940;
  gr_table_x_raw[39] = 0.0006512028181;
  gr_table_x_raw[40] = 0.0011267457390;
  gr_table_x_raw[41] = 0.0017141596740;
  gr_table_x_raw[42] = 0.0023674152850;
  gr_table_x_raw[43] = 0.0030527255360;
  gr_table_x_raw[44] = 0.0037581071970;
  gr_table_x_raw[45] = 0.0045289696780;
  gr_table_x_raw[46] = 0.0054706732940;
  gr_table_x_raw[47] = 0.0066954517650;
  gr_table_x_raw[48] = 0.0081442878920;
  gr_table_x_raw[49] = 0.0096584563910;
  gr_table_x_raw[50] = 0.0111818552200;
  gr_table_x_raw[51] = 0.0139228675800;
  gr_table_x_raw[52] = 0.0172579735900;
  gr_table_x_raw[53] = 1.0000000000000;

  // gr_table_y
  gr_table_y_raw = allocate(gr_table_len * 3);
  gr_table_y_raw[0] = 1.19441334700;
  gr_table_y_raw[1] = 1.19441334700;
  gr_table_y_raw[2] = 1.17514954100;
  gr_table_y_raw[3] = 1.16456995300;
  gr_table_y_raw[4] = 1.11193381000;
  gr_table_y_raw[5] = 0.95086977030;
  gr_table_y_raw[6] = 0.73942550540;
  gr_table_y_raw[7] = 0.53572080760;
  gr_table_y_raw[8] = 0.37008517710;
  gr_table_y_raw[9] = 0.24665404760;
  gr_table_y_raw[10] = 0.16273974240;
  gr_table_y_raw[11] = 0.10951501340;
  gr_table_y_raw[12] = 0.07469268520;
  gr_table_y_raw[13] = 0.05049766445;
  gr_table_y_raw[14] = 0.03420736713;
  gr_table_y_raw[15] = 0.02404922493;
  gr_table_y_raw[16] = 0.01751888654;
  gr_table_y_raw[17] = 0.00000000000;
  gr_table_y_raw[18] = 1.03359767900;
  gr_table_y_raw[19] = 1.03359767900;
  gr_table_y_raw[20] = 1.01705228000;
  gr_table_y_raw[21] = 1.00764867400;
  gr_table_y_raw[22] = 0.98704744970;
  gr_table_y_raw[23] = 0.87920535940;
  gr_table_y_raw[24] = 0.70365451860;
  gr_table_y_raw[25] = 0.51811434480;
  gr_table_y_raw[26] = 0.35795275110;
  gr_table_y_raw[27] = 0.23784291470;
  gr_table_y_raw[28] = 0.15572572970;
  gr_table_y_raw[29] = 0.10214781390;
  gr_table_y_raw[30] = 0.06900549260;
  gr_table_y_raw[31] = 0.04695851429;
  gr_table_y_raw[32] = 0.03301034542;
  gr_table_y_raw[33] = 0.02401826988;
  gr_table_y_raw[34] = 0.01667035506;
  gr_table_y_raw[35] = 0.00000000000;
  gr_table_y_raw[36] = 1.20135432000;
  gr_table_y_raw[37] = 1.20135432000;
  gr_table_y_raw[38] = 1.17391162900;
  gr_table_y_raw[39] = 1.16652211600;
  gr_table_y_raw[40] = 1.13437929100;
  gr_table_y_raw[41] = 0.96992748780;
  gr_table_y_raw[42] = 0.75286667980;
  gr_table_y_raw[43] = 0.54561590170;
  gr_table_y_raw[44] = 0.37750617640;
  gr_table_y_raw[45] = 0.25568776440;
  gr_table_y_raw[46] = 0.17358290440;
  gr_table_y_raw[47] = 0.11939927650;
  gr_table_y_raw[48] = 0.08162638572;
  gr_table_y_raw[49] = 0.05440524970;
  gr_table_y_raw[50] = 0.03539994489;
  gr_table_y_raw[51] = 0.02477268373;
  gr_table_y_raw[52] = 0.01725797359;
  gr_table_y_raw[53] = 0.00000000000;

  // 3 models:
  gr_table_x = allocate(3);
  gr_table_y = allocate(3);
  gr_table_segment = allocate(3);
  
  i = 0;
  loop(3,
    gr_table_x[i] = gr_table_x_raw + gr_table_len * i;
    gr_table_y[i] = gr_table_y_raw + gr_table_len * i;

    gr_table_segment[i] = generate_segments(gr_table_x[i], gr_table_y[i], gr_table_len);
  
    i += 1;
  );
 
);

// continue @init:

(!tables_ready) ? (

  __memory_Index__ = 0;

  init_tables();
  
  tables_ready = 1;
);

(sample_rate != srate) ? (

  left.RS124Compressor_setSampleRate();
  right.RS124Compressor_setSampleRate();
  
  sample_rate = srate;
);

// reset state
left.RS124Compressor_reset();
right.RS124Compressor_reset();

@slider

// scale our -24..+24 (JClones specific) to original 0..10
input_gain_org = (slider2 / 24.0 + 1.0) * 5.0;

left.RS124Compressor_setParameters(slider1, input_gain_org, slider3, slider4, slider5, slider6);
right.RS124Compressor_setParameters(slider1, input_gain_org, slider3, slider4, slider5, slider6);

@block

@sample

spl0 = left.RS124Compressor_processSample(spl0);
spl1 = right.RS124Compressor_processSample(spl1);


