desc:       JClones_CL1B
version:    1.0.0
author:     JClones
tags:       tube compressor
link:       https://github.com/JClones/JSFXClones
screenshot: https://github.com/JClones/JSFXClones/blob/master/assets/screenshots/JClones_CL1B.png
about:
    # JClones_CL1B
    JClones_CL1B plugin is a clone of older version of digital emulation of the renowned optical compressor, which is widely used in professional audio production. The modelled hardware compressor is highly regarded for its smooth, warm, and musical compression characteristics, making it a popular choice for vocals, bass, drums, and other instruments.

    ## Main Parameters

    **Ratio:** The ratio control determines the amount of gain reduction applied once the signal exceeds the threshold.

    **Threshold:** This control sets the level at which compression begins. When the input signal exceeds the threshold level, compression is applied. JClones specific: the parameter sets exact dB value unlike the cloned plugin, which models the hardware knob behavior.

    **Attack:** The attack parameter controls how quickly the compressor responds to signals that exceed the threshold. Note: the parameter is ignored in "Fixed" mode.

    **Release:** The release control determines how quickly the compressor stops compressing after the signal falls below the threshold. Note: the parameter is ignored in "Fixed" mode.

    **A/R Select:** The parameter has three settings:

    **Fixed:** In Fixed mode, both the attack and release times are set to predefined values that are not adjustable. This mode is designed to provide a classic, vintage-style compression behavior that is consistent and easy to use.

    **Manual:** In Manual mode, users have full control over the attack and release times, allowing for precise adjustments to tailor the compressor's response to the specific audio material.

    **Fixed/Manual:** The Fixed/Manual mode combines elements of both Fixed and Manual modes. In this setting, the attack time is fixed at a predefined value, while the release time can be adjusted manually.

    **Output Gain:** This parameter allows you to increase or decrease the output level of the signal after compression has been applied. JClones specific: the parameter sets exact dB value unlike the cloned plugin, which models the hardware knob behavior.

slider1:6.0<2,10,0.1>Ratio, : 1
slider2:0<-40,10,0.1>Threshold, dB
slider3:5.0<0,10.0,0.1>Attack
slider4:5.0<0,10.0,0.1>Release
slider5:2<0,2,1{Fixed,Fixed/Manual,Manual}>A/R Select
slider6:0<-24,24,0.1>Output Gain, dB

@init

function DB_TO_K(x)
(
  10 ^ (x / 20)
);

// for allocator
__memory_Index__ = 0;

function allocate(size) local(result)
(
  result = __memory_Index__;
   __memory_Index__ += size;
  result;
);

// interpolation helpers

M_LN2 = log(2);

function frexp(x) local(sign, a1)
(
  sign = 0;
  
  (x < 0.0) ? (
    x = -x;
    sign = 1;
  );
  
  frexp_exp = ceil(log(x) / M_LN2);
  
  a1 = x / pow(2.0, frexp_exp);
  
  (a1 == 1.0) ? (
    a1 = 0.5;
    frexp_exp += 1;
  );
  
  sign ? ( a1 = -a1; );
  
  a1;
);

function ldexp(a, b)
(
  a * pow(2.0, b);
);

function clamp(x)
(
  min(max(x, -0.99999988), 0.99999988);
);

function interpolate_lin(x, table_lin, table_size) local(index_int, index_frac)
(
  x = clamp(x);

  (x < 0.0) ?
    x = 0.0;

  x *= table_size - 1;

  index_int = floor(x);

  (index_int == table_size - 1) ? (
  
    table_lin[table_size - 1];
    
  ) : (

    index_frac = x - index_int;
  
    table_lin[index_int] * (1.0 - index_frac) + table_lin[index_int + 1] * index_frac;
    
  );
);

function interpolate_exp(x, table_exp, is_neg) local(exp, mant, index, frac)
(
  (is_neg) ? (
    // table_exp size is [48], with center index 23
    table_exp += 23;
  );

  x = clamp(x);

  (x * 1000000 == 0.0) ? (    // ??? WTF with JSFX here ??? (x == 0.0 doesn't work)
  
    table_exp[23];
    
  ) : (

    mant = frexp(x);
    exp = frexp_exp;
  
    index = 1 - exp;
  
    (index < 0) ?
      exp = 0;
  
    (index > 22) ? (
      frac = ldexp(mant, 22 + exp);
      index = 23;
    ) : (
      (mant <= 0.0) ? (
        frac = (mant + 0.5) * 2.0;
      ) : (
        frac = (mant - 0.5) * 2.0;
      );
    );
  
    (x < 0.0 && is_neg) ? (
      index = -index;   // negative index
  
      frac = frac + 1.0;  // negative frac
    );
  
    frac * (table_exp[index] - table_exp[index + 1]) + table_exp[index + 1];
  );
);

/*
 * CLCompressor
 */

AR_FIXED = 0;
AR_FIXED_MANUAL = 1;
AR_MANUAL = 2;

function CLCompressor_setSampleRate() local(lpf1_attack_sec, lpf1_release_sec, lpf2_attack_sec, lpf2_release_sec, release_sec)
(
  lpf1_attack_sec = 1.324200 * 0.001;
  lpf1_release_sec = 1.782562 * 0.001;

  lpf2_attack_sec = 28.011420 * 0.001;
  lpf2_release_sec = 26.260180 * 0.001;

  release_sec = 5.898;

  this.lpf1_attack = exp(-1.0 / (srate * lpf1_attack_sec));
  this.lpf1_release = exp(-1.0 / (srate * lpf1_release_sec));
  this.lpf2_attack = exp(-1.0 / (srate * lpf2_attack_sec));
  this.lpf2_release = exp(-1.0 / (srate * lpf2_release_sec));

  this.release_k = exp(-1.0 / (srate * release_sec));

  this.post_eq_k = 1.0 - exp(-2.0 * $pi * (20000.0 / srate));
);

function CLCompressor_reset()
(
  this.lpf1_state = 0.0;
  this.lpf2_state = 0.0;

  this.level_state = 0.0;

  this.post_eq_s1 = 0.0;
  this.post_eq_s2 = 0.0;
);

function CLCompressor_setParameters(ratio, threshold_dB, attack_release_mode, attack, release, output_gain_dB)
(
  this.T3 = interpolate_exp(ratio, table3_exp, 0);
  this.T10 = interpolate_exp(ratio, table10_exp, 0);
  this.T8 = interpolate_lin(attack, table8_lin, 46) * (44100.0 / srate);   // rescale table
  this.T9 = interpolate_lin(release, table9_lin, 24) * (44100.0 / srate);   // rescale table

  this.T4 = interpolate_lin(this.T3, table4_lin, 24);

  this.attack_release_mode = attack_release_mode;

  this.T7 = DB_TO_K(-40.0 - threshold_dB);    // interpolation table T7 not used
  this.T11 = DB_TO_K(-30.0 + output_gain_dB); // interpolation table T11 not used
);

function CLCompressor_processSampleStereo(x1, x2) 
  local(
    inv_gr, gain_reduction, T5, T6, A1, B1, A2, B2, m1, m2,
    mult, T2_on, input1, input2, T12_1, T12_2, level_1, combined_level,
    T13, lpf1_k, lpf2_k, y1, y2
  )
(
  // feedback signal path
  inv_gr = this.lpf1_state * 0.2998201 + this.lpf2_state * 0.079904087;
  
  gain_reduction = 0.0029900903 / clamp(inv_gr + 0.0029900903);

  // feedback sidechain path

  T5 = interpolate_exp(inv_gr, table5_exp, 0);
  T6 = interpolate_lin(T5, table6_lin, 24);

  A1 = 0.01193628;
  B1 = 0.9323384;
  A2 = 0.4595526;
  B2 = 1.0;

  m1 = (A1 * T6 + B1 * (1.0 - T6));
  m2 = (A2 * T6 + B2 * (1.0 - T6));

  mult = m1 * (1.0 - this.T4) + m2 * this.T4;

  T2_on = 0.08098298;

  // detector path
  input1 = (x1 * T2_on) * mult * this.T7;
  input2 = (x2 * T2_on) * mult * this.T7;

  T12_1 = interpolate_exp(input1, table12_exp_neg, 1);
  T12_2 = interpolate_exp(input2, table12_exp_neg, 1);
  
  level_1 = max(abs(T12_1), abs(T12_2));    // stereo-link

  (this.attack_release_mode != AR_FIXED) ? (
    // attack/release
    (level_1 >= this.level_state) ? (
      // attack
      this.level_state = min(this.level_state + this.T8, level_1);
    ) : (
      // release
      this.level_state = max(this.level_state * this.release_k - this.T9, level_1);
    );
  );

  (this.attack_release_mode == AR_FIXED) ? (
    combined_level = level_1;
  ) : (
    (this.attack_release_mode == AR_MANUAL) ? (
      combined_level = this.level_state;
    ) : (
      combined_level = max(level_1, this.level_state);
    );
  );

  T13 = interpolate_lin(combined_level, table13_lin, 252);

  // lpf1
  lpf1_k = (T13 > this.lpf1_state) ? this.lpf1_attack : this.lpf1_release;

  this.lpf1_state = T13 + (this.lpf1_state - T13) * lpf1_k;

  // lpf2
  lpf2_k = (T13 > this.lpf2_state) ? this.lpf2_attack : this.lpf2_release;

  this.lpf2_state = T13 + (this.lpf2_state - T13) * lpf2_k;

  // output
  y1 = x1 * this.T10 * this.T11 * gain_reduction * 33.768673;
  y2 = x2 * this.T10 * this.T11 * gain_reduction * 33.768673;

  // post_eq
  this.post_eq_s1 += (y1 - this.post_eq_s1) * this.post_eq_k;
  this.post_eq_s2 += (y2 - this.post_eq_s2) * this.post_eq_k;

  this.y1 = this.post_eq_s1;
  this.y2 = this.post_eq_s2;
);

//=========== table of measured values ============

function init_tables() local(i)
(
  // T3
  table3_exp = allocate(25);
  table3_exp[0] = 0.999999;
  table3_exp[1] = 0.99;
  table3_exp[2] = 0.5626293;
  table3_exp[3] = 0.2993541;
  table3_exp[4] = 0.1536661;
  table3_exp[5] = 0.07558671;
  table3_exp[6] = 0.036547;
  table3_exp[7] = 0.01702715;

  i = 8;
  loop(25 - 8,
    table3_exp[i] = 0.01;
    i += 1;
  );

  // T4
  table4_lin = allocate(24);
  table4_lin[0] = 0;
  table4_lin[1] = 0.03416149;
  table4_lin[2] = 0.07852706;
  table4_lin[3] = 0.1228926;
  table4_lin[4] = 0.1672582;
  table4_lin[5] = 0.2116238;
  table4_lin[6] = 0.2559893;
  table4_lin[7] = 0.3003549;
  table4_lin[8] = 0.3447205;
  table4_lin[9] = 0.3890861;
  table4_lin[10] = 0.4334517;
  table4_lin[11] = 0.4778172;
  table4_lin[12] = 0.5221828;
  table4_lin[13] = 0.5665483;
  table4_lin[14] = 0.6109139;
  table4_lin[15] = 0.6552795;
  table4_lin[16] = 0.6996451;
  table4_lin[17] = 0.7440106;
  table4_lin[18] = 0.7883762;
  table4_lin[19] = 0.8327418;
  table4_lin[20] = 0.8771074;
  table4_lin[21] = 0.921473;
  table4_lin[22] = 0.9658385;
  table4_lin[23] = 0.999999;

  // T5
  table5_exp = allocate(25);
  table5_exp[0] = 0.01;
  table5_exp[1] = 1;
  table5_exp[2] = 0.9947661;
  table5_exp[3] = 0.9844928;
  table5_exp[4] = 0.9651101;
  table5_exp[5] = 0.9302186;
  table5_exp[6] = 0.8630559;
  table5_exp[7] = 0.755419;
  table5_exp[8] = 0.6082814;
  table5_exp[9] = 0.4397123;
  table5_exp[10] = 0.2796561;
  table5_exp[11] = 0.162245;
  table5_exp[12] = 0.08780019;
  table5_exp[13] = 0.04508;
  table5_exp[14] = 0.02209106;
  table5_exp[15] = 0.01019185;
  table5_exp[16] = 0.004130001;
  table5_exp[17] = 0.001069335;
  table5_exp[18] = 0.00001000000;
  table5_exp[19] = 0.00001000000;
  table5_exp[20] = 0.00001000000;
  table5_exp[21] = 0.00001000000;
  table5_exp[22] = 0.00001000000;
  table5_exp[23] = 0.00001000000;
  table5_exp[24] = 0.00001000000;

  // T6
  table6_lin = allocate(24);
  table6_lin[0] = 0;
  table6_lin[1] = 0.0434687;
  table6_lin[2] = 0.08694739;
  table6_lin[3] = 0.1304261;
  table6_lin[4] = 0.1739048;
  table6_lin[5] = 0.2173835;
  table6_lin[6] = 0.2608622;
  table6_lin[7] = 0.3043409;
  table6_lin[8] = 0.3478196;
  table6_lin[9] = 0.3912983;
  table6_lin[10] = 0.434777;
  table6_lin[11] = 0.4782557;
  table6_lin[12] = 0.5217344;
  table6_lin[13] = 0.565213;
  table6_lin[14] = 0.6086918;
  table6_lin[15] = 0.6521704;
  table6_lin[16] = 0.6956491;
  table6_lin[17] = 0.7391278;
  table6_lin[18] = 0.7826065;
  table6_lin[19] = 0.8260852;
  table6_lin[20] = 0.8695639;
  table6_lin[21] = 0.9130426;
  table6_lin[22] = 0.9565213;
  table6_lin[23] = 0.999999;

  // T7: not used (threshold)

  // T8
  table8_lin = allocate(46);

  i = 0;
  loop(11,
    table8_lin[i] = 0.002257127;
    i += 1;
  );

  table8_lin[11] = 0.000807641;
  table8_lin[12] = 0.0002590034;
  table8_lin[13] = 0.0001466583;
  table8_lin[14] = 0.000105361;
  table8_lin[15] = 0.00008688696;
  table8_lin[16] = 0.00007712693;
  table8_lin[17] = 0.00007082194;
  table8_lin[18] = 0.00006535164;
  table8_lin[19] = 0.00005942077;
  table8_lin[20] = 0.00005248035;
  table8_lin[21] = 0.00004474115;
  table8_lin[22] = 0.00003699339;
  table8_lin[23] = 0.00002985739;
  table8_lin[24] = 0.00002377450;
  table8_lin[25] = 0.00001915936;
  table8_lin[26] = 0.00001565825;
  table8_lin[27] = 0.00001302099;
  table8_lin[28] = 0.00001102717;
  table8_lin[29] = 0.000009554097;
  table8_lin[30] = 0.000008418394;
  table8_lin[31] = 0.000007519858;
  table8_lin[32] = 0.000006788958;
  table8_lin[33] = 0.000006188009;
  table8_lin[34] = 0.000005677829;
  table8_lin[35] = 0.000005232528;
  table8_lin[36] = 0.000004838532;
  table8_lin[37] = 0.000004491788;
  table8_lin[38] = 0.000004193505;
  table8_lin[39] = 0.000003938723;
  table8_lin[40] = 0.000003725471;
  table8_lin[41] = 0.000003552736;
  table8_lin[42] = 0.000003421820;
  table8_lin[43] = 0.000003326748;
  table8_lin[44] = 0.000003267550;
  table8_lin[45] = 0.000003245660;

  // T9
  table9_lin = allocate(24);
  table9_lin[0] = 0.00004848326;
  table9_lin[1] = 0.00004848326;
  table9_lin[2] = 0.00004848326;
  table9_lin[3] = 0.00004188835;
  table9_lin[4] = 0.00002785662;
  table9_lin[5] = 0.00001560057;
  table9_lin[6] = 0.00001201397;
  table9_lin[7] = 0.000008427365;
  table9_lin[8] = 0.000005328864;
  table9_lin[9] = 0.000004453937;
  table9_lin[10] = 0.000003579009;
  table9_lin[11] = 0.000002704082;
  table9_lin[12] = 0.000002101815;
  table9_lin[13] = 0.000001772209;
  table9_lin[14] = 0.000001442603;
  table9_lin[15] = 0.000001112997;
  table9_lin[16] = 8.481028*10^-7;
  table9_lin[17] = 6.281776*10^-7;
  table9_lin[18] = 4.082524*10^-7;
  table9_lin[19] = 2.060375*10^-7;
  table9_lin[20] = 1.126142*10^-7;
  table9_lin[21] = 1.919095*10^-8;
  table9_lin[22] = 3.280834*10^-10;
  table9_lin[23] = -4.332800*10^-9;

  // T10
  table10_exp = allocate(25);
  table10_exp[0] = 0.8766871;
  table10_exp[1] = 0.8766871;
  table10_exp[2] = 0.9343757;
  table10_exp[3] = 0.966794;
  table10_exp[4] = 0.9838194;
  table10_exp[5] = 0.9926132;
  table10_exp[6] = 0.9970101;
  table10_exp[7] = 0.9992085;

  i = 8;
  loop(25 - 8,
    table10_exp[i] = 1;
    i += 1;
  );

  // T11: not used (output gain)

  // T12
  table12_exp_neg = allocate(48);
  table12_exp_neg[0] = 0.000002987261;
  table12_exp_neg[1] = 0.000005974523;
  table12_exp_neg[2] = 0.00001194905;
  table12_exp_neg[3] = 0.00002389809;
  table12_exp_neg[4] = 0.00004779618;
  table12_exp_neg[5] = 0.00009559237;
  table12_exp_neg[6] = 0.0001911847;
  table12_exp_neg[7] = 0.0003823695;
  table12_exp_neg[8] = 0.0007647389;
  table12_exp_neg[9] = 0.001529478;
  table12_exp_neg[10] = 0.003058956;
  table12_exp_neg[11] = 0.006117912;
  table12_exp_neg[12] = 0.01223582;
  table12_exp_neg[13] = 0.02447165;
  table12_exp_neg[14] = 0.04894329;
  table12_exp_neg[15] = 0.09788658;
  table12_exp_neg[16] = 0.1957732;
  table12_exp_neg[17] = 0.3915463;
  table12_exp_neg[18] = 0.7830927;
  table12_exp_neg[19] = 1;
  table12_exp_neg[20] = 1;
  table12_exp_neg[21] = 1;
  table12_exp_neg[22] = 1;
  table12_exp_neg[23] = 1;
  table12_exp_neg[24] = 1;
  table12_exp_neg[25] = 1;
  table12_exp_neg[26] = 1;
  table12_exp_neg[27] = 1;
  table12_exp_neg[28] = 1;
  table12_exp_neg[29] = 0.7810927;
  table12_exp_neg[30] = 0.3895463;
  table12_exp_neg[31] = 0.1937732;
  table12_exp_neg[32] = 0.09588659;
  table12_exp_neg[33] = 0.04694329;
  table12_exp_neg[34] = 0.02247165;
  table12_exp_neg[35] = 0.01023582;
  table12_exp_neg[36] = 0.004117912;
  table12_exp_neg[37] = 0.001058956;
  table12_exp_neg[38] = 0;
  table12_exp_neg[39] = 0;
  table12_exp_neg[40] = 0;
  table12_exp_neg[41] = 0;
  table12_exp_neg[42] = 0;
  table12_exp_neg[43] = 0;
  table12_exp_neg[44] = 0;
  table12_exp_neg[45] = 0;
  table12_exp_neg[46] = 0;
  table12_exp_neg[47] = 0;

  // T13
  table13_lin = allocate(252);
  table13_lin[0] = 0;
  table13_lin[1] = 0.002895139;
  table13_lin[2] = 0.01001967;
  table13_lin[3] = 0.01859283;
  table13_lin[4] = 0.0278201;
  table13_lin[5] = 0.03739988;
  table13_lin[6] = 0.04719125;
  table13_lin[7] = 0.05711957;
  table13_lin[8] = 0.06714159;
  table13_lin[9] = 0.07723056;
  table13_lin[10] = 0.087369;
  table13_lin[11] = 0.09754504;
  table13_lin[12] = 0.1077503;
  table13_lin[13] = 0.1179788;
  table13_lin[14] = 0.1282261;
  table13_lin[15] = 0.1384886;
  table13_lin[16] = 0.1487638;
  table13_lin[17] = 0.1590496;
  table13_lin[18] = 0.1693444;
  table13_lin[19] = 0.1796468;
  table13_lin[20] = 0.1899559;
  table13_lin[21] = 0.2002707;
  table13_lin[22] = 0.2105905;
  table13_lin[23] = 0.2209146;
  table13_lin[24] = 0.2312426;
  table13_lin[25] = 0.2415741;
  table13_lin[26] = 0.2519086;
  table13_lin[27] = 0.2622458;
  table13_lin[28] = 0.2725855;
  table13_lin[29] = 0.2829274;
  table13_lin[30] = 0.2932713;
  table13_lin[31] = 0.303617;
  table13_lin[32] = 0.3139643;
  table13_lin[33] = 0.3243132;
  table13_lin[34] = 0.3346635;
  table13_lin[35] = 0.345015;
  table13_lin[36] = 0.3553677;
  table13_lin[37] = 0.3657215;
  table13_lin[38] = 0.3760763;
  table13_lin[39] = 0.3864319;
  table13_lin[40] = 0.3967885;
  table13_lin[41] = 0.4071458;
  table13_lin[42] = 0.4175039;
  table13_lin[43] = 0.4278626;
  table13_lin[44] = 0.4382221;
  table13_lin[45] = 0.4485821;
  table13_lin[46] = 0.4589426;
  table13_lin[47] = 0.4693037;
  table13_lin[48] = 0.4796653;
  table13_lin[49] = 0.4900274;
  table13_lin[50] = 0.5003899;
  table13_lin[51] = 0.5107529;
  table13_lin[52] = 0.5211161;
  table13_lin[53] = 0.5314798;
  table13_lin[54] = 0.5418439;
  table13_lin[55] = 0.5522082;
  table13_lin[56] = 0.562573;
  table13_lin[57] = 0.5729379;
  table13_lin[58] = 0.5833032;
  table13_lin[59] = 0.5936688;
  table13_lin[60] = 0.6040345;
  table13_lin[61] = 0.6144006;
  table13_lin[62] = 0.6247668;
  table13_lin[63] = 0.6351333;
  table13_lin[64] = 0.6455;
  table13_lin[65] = 0.6558669;
  table13_lin[66] = 0.666234;
  table13_lin[67] = 0.6766013;
  table13_lin[68] = 0.6869688;
  table13_lin[69] = 0.6973364;
  table13_lin[70] = 0.7077042;
  table13_lin[71] = 0.7180721;
  table13_lin[72] = 0.7284402;
  table13_lin[73] = 0.7388085;
  table13_lin[74] = 0.7491769;
  table13_lin[75] = 0.7595453;
  table13_lin[76] = 0.769914;
  table13_lin[77] = 0.7802827;
  table13_lin[78] = 0.7906516;
  table13_lin[79] = 0.8010206;
  table13_lin[80] = 0.8113897;
  table13_lin[81] = 0.8217589;
  table13_lin[82] = 0.8321282;
  table13_lin[83] = 0.8424976;
  table13_lin[84] = 0.8528671;
  table13_lin[85] = 0.8632367;
  table13_lin[86] = 0.8736063;
  table13_lin[87] = 0.883976;
  table13_lin[88] = 0.8943459;
  table13_lin[89] = 0.9047158;
  table13_lin[90] = 0.9150858;
  table13_lin[91] = 0.9254559;
  table13_lin[92] = 0.935826;
  table13_lin[93] = 0.9461962;
  table13_lin[94] = 0.9565665;
  table13_lin[95] = 0.9669368;
  table13_lin[96] = 0.9773072;
  table13_lin[97] = 0.9876777;
  table13_lin[98] = 0.9980482;

  i = 99;
  loop(252 - 99,
    table13_lin[i] = 1;
    i += 1;
  );

);

// continue @init:

init_tables();

(sample_rate != srate) ? (

  effect.CLCompressor_setSampleRate();
  
  sample_rate = srate;
);

// reset state
effect.CLCompressor_reset();

@slider

effect.CLCompressor_setParameters(
  (slider1 - 2.0) / 8.0,  // 2..10 -> 0..1
  slider2,
  slider3 * 0.1,  // 0..10 -> 0..1
  slider4 * 0.1,  // 0..10 -> 0..1
  slider5,
  slider6
);

@block

@sample

effect.CLCompressor_processSampleStereo(spl0, spl1);

spl0 = effect.y1;
spl1 = effect.y2;

