desc:       JClones_TubeDriver
version:    1.0.0
author:     JClones
tags:       saturation
link:       https://github.com/JClones/JSFXClones
screenshot: https://github.com/JClones/JSFXClones/blob/master/assets/screenshots/JClones_TubeDriver.png
about:
    # JClones_TubeDriver
    JClones_TubeDriver is a clone of an older version of popular free plugin that emulates the characteristics of tube-based saturation and distortion. Itâ€™s known for its straightforward design and effective results in adding warmth, grit, and harmonic richness to audio tracks.

    ## Main Parameters

    **Input Gain:** Controls the level of the signal entering the plugin.

    **Drive:** Determines the amount of tube saturation and distortion applied to the signal.

    **Bias:** Adjusts the electrical bias of the modeled tube.

    **Boost:** Increases the signal level entering the tube emulation circuit.

    **Output Gain:** Controls the level of the signal after processing.

    Note: JClones version offers linear phase oversampling, auto gain Drive and Bias parameters compensation and additional DC remover.

slider1:0<-12,12,0.1>Input Gain, dB
slider2:2<0,10,0.1>Drive
slider3:5<0,10,0.1>Bias
slider4:0<0,1,1{Off,On}>Boost
slider5:0<-12,12,0.1>Output Gain, dB

@init

OVERSAMPLING_BLOCK_SIZE = 128;

DC_REMOVER_FREQ_HZ = 5.0;

// for allocator
function allocate(size) local(result)
(
  result = __memory_Index__;
  __memory_Index__ += size;
  result;
);

// calculate FFT size
function getFFTSize(N_max) local(fft_size)
(
  fft_size = 16;
  
  while (fft_size < N_max) (
    fft_size *= 2;
  );
    
  fft_size;
);

function DB_TO_K(x)
(
  10 ^ (x / 20)
);

function tanh(x) local(e2x)
(
  e2x = exp(2.0 * x);
  (e2x - 1.0) / (e2x + 1.0);
);

/*
 * OverlapAddLinPhase - fast convolution linear phase filter
 */

function OverlapAddLinPhase_reset()
(
  // reset state

  this.buffer_index = 0;
  this.write_offset = 0;

  memset(this.output_0, 0, this.buffer_len);
  memset(this.output_1, 0, this.buffer_len);

  memset(this.input, 0, this.buffer_len);
);

function OverlapAddLinPhase_init(N_max)
(
  this.block_size = getFFTSize(N_max);
  this.fft_size = this.block_size * 2;      // pad impulse with zeros up to 2*N
  this.block_offset = this.fft_size / 4;
   
  // setup all buffers and transforms

  // REAPER 5.25+ (not compatible with ReaJS):
  //this.buffer_len = this.fft_size;
  //this.fft_gain = (0.5 * 0.5) / this.fft_size;

  // --- ReaJS compatible ---
  this.buffer_len = this.fft_size * 2;
  this.fft_gain = 1.0 / this.fft_size;
  // ------------------------

  this.input = allocate(this.buffer_len);     // input buffer
  this.output_0 = allocate(this.buffer_len);
  this.output_1 = allocate(this.buffer_len);  // overlap-add buffers
  this.impulse = allocate(this.buffer_len);   // impulse

  this.OverlapAddLinPhase_reset()
);

function OverlapAddLinPhase_setLinPhaseImpulse(ir, N) local(ir_offset, i, j)
(
  // zero pad
  memset(this.impulse, 0, this.fft_size);
  
  ir_offset = this.fft_size - floor(N / 2);
  
  i = 0;
  
  loop(N,
    // make IR center to have zero phase
    this.impulse[(i + ir_offset) % this.fft_size] = ir[i] * this.fft_gain;
    i += 1;
  );
  
  // REAPER 5.25+ (not compatible with ReaJS):
  // fft_real(this.impulse, this.fft_size);
  
  // --- ReaJS compatible ---
  
  i = this.fft_size - 1;
  j = i * 2;
  
  loop(this.fft_size,
    this.impulse[j] = this.impulse[i];    // Re
    this.impulse[j + 1] = 0.0;            // Im
    i -= 1;
    j -= 2;
  );
  
  fft(this.impulse, this.fft_size);

  // ------------------------
);

function OverlapAddLinPhase_getLatency()
(
  this.block_size + this.block_size / 2;
);

function OverlapAddLinPhase_processSample(x) local(y, i, j, y_0, y_1)
(
  // write input into the buffer
  this.input[this.block_offset + this.write_offset] = x;
  
  // prepare output plus overlapped value (overlap-add)
  y = (this.buffer_index == 0) ?
    this.output_0[this.write_offset] + this.output_1[this.write_offset + this.block_size] :
    this.output_1[this.write_offset] + this.output_0[this.write_offset + this.block_size];
    
  this.write_offset += 1;
  
  (this.write_offset >= this.block_size) ? (
  
    (!this.is_bypass) ? (
    
      // process input buffer:
      
      /*
      // REAPER 5.25+ (not compatible with ReaJS):
      
      // 1. forward FFT transform
      fft_real(this.input, this.fft_size);
      
      // 2. apply convolution in F domain:
      
      // special processing
      y_0 = this.input[0] * this.impulse[0];
      y_1 = this.input[1] * this.impulse[1];

      // complex multiplication
      convolve_c(this.input, this.impulse, this.fft_size / 2);
      
      // bypass complex multiplication for DC and Nyquist
      this.input[0] = y_0;
      this.input[1] = y_1;
      
      // 3. backward FFT transform
      ifft_real(this.input, this.fft_size);
      */
      
      // --- ReaJS compatible ---
      
      i = this.fft_size - 1;
      j = i * 2;
      
      loop(this.fft_size,
        this.input[j] = this.input[i];    // Re
        this.input[j + 1] = 0.0;          // Im
        i -= 1;
        j -= 2;
      );
      
      // 1. forward FFT transform
      fft(this.input, this.fft_size);
      
      // 2. apply convolution in F domain:
      convolve_c(this.input, this.impulse, this.fft_size);
      
      // 3. backward FFT transform
      ifft(this.input, this.fft_size);

      i = 0;
      j = 0;
      
      loop(this.fft_size,
        this.input[i] = this.input[j];    // Re (ignore Im)
        i += 1;
        j += 2;
      );
    
      // ------------------------
    );
  
    // 3. switch buffers
    this.buffer_index = 1 - this.buffer_index;
    this.write_offset = 0;
  
    (this.buffer_index == 0) ?
      memcpy(this.output_0, this.input, this.fft_size) :
      memcpy(this.output_1, this.input, this.fft_size);
  
    memset(this.input, 0, this.fft_size);
  );
  
  y;
);

/*
 * FFTResampler2x
 */
 
function BH4(x)
(
  // https://www.mathworks.com/matlabcentral/mlc-downloads/downloads/submissions/46092/versions/3/previews/coswin.m/index.html
  // % 4 Term Blackman-Harris window, 92 dB
  0.358750287312166 - 0.4882901074726 * cos(2.0 * $pi * x) + 0.141279712970519 * cos(4.0 * $pi * x) - 0.011679892244715 * cos(6.0 * $pi * x);
); 
 
function FFTResampler2x_generateFilter(N, buffer) local(center_i, sum_y, i, sin_x, sinc_x, wnd_x, wnd_y)
(
  memset(buffer, 0, N);
  
  center_i = N / 2;
  
  sum_y = 0;
  
  i = 1;
  
  while (i < N / 2) (
  
    sin_x = ((i % 4) == 1) ? 1 : -1;
    sinc_x = sin_x / (i * $pi / 2);
  
    // apply window
    wnd_x = 0.5 + 0.5 * i / (N / 2 - 1);
    wnd_y = BH4(wnd_x);
    
    sinc_x *= wnd_y;
    
    buffer[center_i + i] = sinc_x;
    buffer[center_i - i] = sinc_x;     // symmetric
    
    sum_y += sinc_x + sinc_x;
    
    i += 2;
  );
  
  buffer[center_i] = 1;
  
  sum_y += buffer[center_i];
  
  // normalize

  i = 1;
  
  while (i < N / 2) (
    buffer[center_i + i] /= sum_y;
    buffer[center_i - i] /= sum_y;
  
    i += 2;
  );

  buffer[center_i] /= sum_y;
);

function FFTResampler2x_init(block_size) local(N, filter_ir)
(
  N = block_size * 2;     // 2x oversampling

  filter_ir = __memory_Index__;
  __memory_Index__ += N;
  
  this.FFTResampler2x_generateFilter(N, filter_ir);
  
  this.filter.OverlapAddLinPhase_init(N);
  this.filter.OverlapAddLinPhase_setLinPhaseImpulse(filter_ir, N);
);

function FFTResampler2x_reset()
(
  this.filter.OverlapAddLinPhase_reset();
);

function FFTResampler2x_upsampleSample(x)
(
  this.y0 = this.filter.OverlapAddLinPhase_processSample(x * 2);
  this.y1 = this.filter.OverlapAddLinPhase_processSample(0);
);

function FFTResampler2x_downsampleSample(x0, x1) local(y)
(
  y = this.filter.OverlapAddLinPhase_processSample(x0);
  
  this.filter.OverlapAddLinPhase_processSample(x1);
  
  y;
);

/*
 * TubeDriver
 */

function TubeDriver_init()
(
  this.up2.FFTResampler2x_init(OVERSAMPLING_BLOCK_SIZE);
  this.dn2.FFTResampler2x_init(OVERSAMPLING_BLOCK_SIZE);
);

function TubeDriver_setSampleRate()
(
  this.dc_k = DC_REMOVER_FREQ_HZ / (srate * 2.0) * 2.0 * $pi;   // 2x oversampled
);

function TubeDriver_getLatency()
(
  OVERSAMPLING_BLOCK_SIZE * 3;
);

function TubeDriver_reset()
(
  this.up2.FFTResampler2x_reset();
  this.dn2.FFTResampler2x_reset();

  this.dc_s = 0.0;
);

function TubeDriver_setDrive(drive, bias) local(xx, td)
(
  this.drive = drive;
  this.bias = bias;

  xx = 0.1;
  td = tanh(xx * drive);

  this.compensation = xx * (td + bias) / td;
);

function TubeDriver_saturate(x) local(tx)
(
  tx = tanh(x * this.drive);

  tx / (tx + this.bias) * this.compensation;
);

function TubeDriver_processSample_Oversampled(x) local(y)
(
  y = this.TubeDriver_saturate(x - this.dc_s);

  // DC remover
  this.dc_s += this.dc_k * y;

  y;
);

function TubeDriver_processSample(x) local(y0, y1)
(
  this.up2.FFTResampler2x_upsampleSample(x);

  y0 = this.TubeDriver_processSample_Oversampled(this.up2.y0);
  y1 = this.TubeDriver_processSample_Oversampled(this.up2.y1);

  this.dn2.FFTResampler2x_downsampleSample(y0, y1);
);

// continue @init:

(init_state == 0) ? (

  init_state = 1;
  
  // init memory buffers:

  __memory_Index__ = 0;

  left.TubeDriver_init();
  right.TubeDriver_init();
);

(srate != sample_rate) ? (

  left.TubeDriver_setSampleRate();
  right.TubeDriver_setSampleRate();

  sample_rate = srate;
);

left.TubeDriver_reset();
right.TubeDriver_reset();

// report latency
pdc_delay = left.TubeDriver_getLatency();
pdc_bot_ch = 0;
pdc_top_ch = 2; // delays the first two channels (spl0/spl1).

@slider

param_input_gain_k = DB_TO_K(slider1);
param_drive = slider2 / 10.0;
param_bias = slider3 / 10.0;
param_boost = slider4;
param_output_gain_k = DB_TO_K(slider5);

tubedriver_drive = param_drive * 5 * (param_boost * 4 + 1) + 0.5;
tubedriver_bias = param_bias * param_bias * 30 + 2;

left.TubeDriver_setDrive(tubedriver_drive, tubedriver_bias);
right.TubeDriver_setDrive(tubedriver_drive, tubedriver_bias);

@block

@sample

spl0 = left.TubeDriver_processSample(spl0 * param_input_gain_k) * param_output_gain_k;
spl1 = right.TubeDriver_processSample(spl1 * param_input_gain_k) * param_output_gain_k;

